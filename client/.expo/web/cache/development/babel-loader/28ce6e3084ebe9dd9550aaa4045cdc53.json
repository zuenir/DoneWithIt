{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZeldaArleth\\\\Documents\\\\GitHub\\\\DoneWithIt\\\\App\\\\components\\\\AppImage\\\\AppImage.js\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport colors from \"../../config/colors\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as ImagePicker from 'expo-image-picker';\n\nfunction AppImage(_ref) {\n  var imageUri = _ref.imageUri,\n      onChangeImage = _ref.onChangeImage;\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var requestPermission = function requestPermission() {\n    var _await$ImagePicker$re, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            _await$ImagePicker$re = _context.sent;\n            granted = _await$ImagePicker$re.granted;\n            if (!granted) alert(\"You need to enable permission to access the library.\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePress = function handlePress() {\n    if (!imageUri) selectImage();else Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [{\n      text: \"Yes\",\n      onPress: function onPress() {\n        return onChangeImage(null);\n      }\n    }, {\n      text: \"No\"\n    }]);\n  };\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              quality: 0.5\n            }));\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) onChangeImage(result.uri);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error reading an image\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, !imageUri && React.createElement(MaterialCommunityIcons, {\n    color: colors.medium,\n    name: \"camera\",\n    size: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), imageUri && React.createElement(Image, {\n    source: {\n      uri: imageUri\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 30\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: colors.light,\n    borderRadius: 15,\n    height: 100,\n    justifyContent: \"center\",\n    marginVertical: 10,\n    overflow: \"hidden\",\n    width: 100\n  },\n  image: {\n    height: \"100%\",\n    width: \"100%\"\n  }\n});\nexport default AppImage;","map":{"version":3,"sources":["C:/Users/ZeldaArleth/Documents/GitHub/DoneWithIt/App/components/AppImage/AppImage.js"],"names":["React","useEffect","colors","MaterialCommunityIcons","ImagePicker","AppImage","imageUri","onChangeImage","requestPermission","requestCameraRollPermissionsAsync","granted","alert","handlePress","selectImage","Alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","result","cancelled","uri","console","log","styles","container","medium","image","StyleSheet","create","alignItems","backgroundColor","light","borderRadius","height","justifyContent","marginVertical","overflow","width"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { View, StyleSheet, Image, TouchableWithoutFeedback, Alert } from 'react-native';\r\nimport colors from '../../config/colors';\r\nimport {MaterialCommunityIcons} from '@expo/vector-icons';\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nfunction AppImage({imageUri, onChangeImage}) {\r\n    useEffect(() => {\r\n        requestPermission();\r\n    }, []);\r\n\r\n    const requestPermission = async () => {\r\n        const { granted } = await ImagePicker.requestCameraRollPermissionsAsync();\r\n        if (!granted) alert(\"You need to enable permission to access the library.\");\r\n    };\r\n    \r\n    const handlePress = () => {\r\n        if (!imageUri) selectImage();\r\n        else\r\n            Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [\r\n                { text: \"Yes\", onPress: () => onChangeImage(null) },\r\n                { text: \"No\" },\r\n            ]);\r\n    };\r\n\r\n    const selectImage = async () => {\r\n        try {\r\n                const result = await ImagePicker.launchImageLibraryAsync({\r\n                mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n                quality: 0.5,\r\n            });\r\n            if (!result.cancelled) onChangeImage(result.uri);\r\n        } catch (error) {\r\n            console.log(\"Error reading an image\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TouchableWithoutFeedback onPress={handlePress}>\r\n            <View style={styles.container}>\r\n                {!imageUri && (\r\n                    <MaterialCommunityIcons\r\n                        color={colors.medium}\r\n                        name=\"camera\"\r\n                        size={40}\r\n                    />\r\n                )}\r\n                {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        alignItems: \"center\",\r\n        backgroundColor: colors.light,\r\n        borderRadius: 15,\r\n        height: 100,\r\n        justifyContent: \"center\",\r\n        marginVertical: 10,\r\n        overflow: \"hidden\",\r\n        width: 100,\r\n    },\r\n    image: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n     },\r\n});\r\n\r\nexport default AppImage;"]},"metadata":{},"sourceType":"module"}