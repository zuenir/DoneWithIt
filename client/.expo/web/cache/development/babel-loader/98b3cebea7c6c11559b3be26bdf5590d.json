{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZeldaArleth\\\\Documents\\\\GitHub\\\\DoneWithIt\\\\App\\\\components\\\\AppPicker\\\\AppPicker.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport defaultStyles from \"../../config/styles\";\nimport styles from \"./styles\";\nimport AppText from \"../AppText\";\nimport Screen from \"../Screen\";\nimport AppPickerItem from \"./AppPickerItem\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var icon = _ref.icon,\n      items = _ref.items,\n      _ref$numberOfColumns = _ref.numberOfColumns,\n      numberOfColumns = _ref$numberOfColumns === void 0 ? 1 : _ref$numberOfColumns,\n      onSelectItem = _ref.onSelectItem,\n      _ref$AppPickerItemCom = _ref.AppPickerItemComponent,\n      AppPickerItemComponent = _ref$AppPickerItemCom === void 0 ? AppPickerItem : _ref$AppPickerItemCom,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? \"100%\" : _ref$width;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [styles.container, {\n      width: width\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 20,\n    color: defaultStyles.colors.medium,\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  }), selectedItem ? React.createElement(AppText, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, selectedItem.label) : React.createElement(AppText, {\n    style: styles.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 20,\n    color: defaultStyles.colors.medium,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    title: \"Close\",\n    onPress: function onPress() {\n      return setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    numColumns: numberOfColumns,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(AppPickerItemComponent, {\n        item: item,\n        label: item.label,\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectItem(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default AppPicker;","map":{"version":3,"sources":["C:/Users/ZeldaArleth/Documents/GitHub/DoneWithIt/App/components/AppPicker/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","defaultStyles","styles","AppText","Screen","AppPickerItem","AppPicker","icon","items","numberOfColumns","onSelectItem","AppPickerItemComponent","placeholder","selectedItem","width","modalVisible","setModalVisible","container","colors","medium","text","label","item","value","toString"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {View, StyleSheet, TouchableWithoutFeedback, Modal, Button, FlatList } from 'react-native';\r\nimport {MaterialCommunityIcons} from '@expo/vector-icons';\r\nimport defaultStyles from '../../config/styles';\r\nimport styles from './styles';\r\nimport AppText from '../AppText';\r\nimport Screen from '../Screen';\r\nimport AppPickerItem from './AppPickerItem';\r\n\r\n\r\nfunction AppPicker({\r\n    icon,\r\n    items,\r\n    numberOfColumns = 1,\r\n    onSelectItem,\r\n    AppPickerItemComponent = AppPickerItem,\r\n    placeholder,\r\n    selectedItem,\r\n    width = \"100%\",\r\n  }) {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n  \r\n    return (\r\n      <>\r\n        <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\r\n          <View style={[styles.container, { width }]}>\r\n            {icon && (\r\n              <MaterialCommunityIcons\r\n                name={icon}\r\n                size={20}\r\n                color={defaultStyles.colors.medium}\r\n                style={styles.icon}\r\n              />\r\n            )}\r\n            {selectedItem ? (\r\n              <AppText style={styles.text}>{selectedItem.label}</AppText>\r\n            ) : (\r\n              <AppText style={styles.placeholder}>{placeholder}</AppText>\r\n            )}\r\n  \r\n            <MaterialCommunityIcons\r\n              name=\"chevron-down\"\r\n              size={20}\r\n              color={defaultStyles.colors.medium}\r\n            />\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n        <Modal visible={modalVisible} animationType=\"slide\">\r\n          <Screen>\r\n            <Button title=\"Close\" onPress={() => setModalVisible(false)} />\r\n            <FlatList\r\n              data={items}\r\n              keyExtractor={(item) => item.value.toString()}\r\n              numColumns={numberOfColumns}\r\n              renderItem={({ item }) => (\r\n                <AppPickerItemComponent\r\n                  item={item}\r\n                  label={item.label}\r\n                  onPress={() => {\r\n                    setModalVisible(false);\r\n                    onSelectItem(item);\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Screen>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n\r\nexport default AppPicker;"]},"metadata":{},"sourceType":"module"}